# -*- coding: utf-8 -*-
"""CIS 550 Project Cleaning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dIP6iJV1q-J1wKpUg36ydTm0q6m0PDop
"""

import json
import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

rec_df = pd.read_csv("recipes.csv")

rev_df = pd.read_csv("reviews.csv")

rec_df

rec_df = rec_df.dropna()
rec_df

datetime = pd.to_datetime(rec_df['DatePublished'])
rec_df['DatePublished'] = datetime.dt.date

rec_df['Description'] = rec_df['Description'].apply(str.lower)

rec_df['RecipeCategory'] = rec_df['RecipeCategory'].apply(str.lower)

rec_df['Keywords'] = rec_df['Keywords'].apply(str.lower)

rec_df['RecipeIngredientParts'] = rec_df['RecipeIngredientParts'].apply(str.lower)

rec_df['RecipeInstructions'] = rec_df['RecipeInstructions'].apply(str.lower)

rec_df.head(5)

rec_df.dtypes

def get_minutes(x):
  num_hours = 0
  num_minutes = 0
  if 'H' in x and 'M' in x:
    loc_h = x.find('H')
    num_hours = int(x[2:loc_h])
    num_minutes = int(x[loc_h + 1: -1])
  elif 'H' in x:
    num_hours = int(x[2:-1])
  else:
    num_minutes = int(x[2:-1])
  return (60 * num_hours) + num_minutes
  #used this to get cook, prep, and total time in minutes

rec_df['CookTime'] = rec_df['CookTime'].apply(lambda x: get_minutes(str(x)))
rec_df['CookTime'].head(5)

rec_df['PrepTime'] = rec_df['PrepTime'].apply(lambda x: get_minutes(str(x)))
rec_df['PrepTime'].head(5)

rec_df['TotalTime'] = rec_df['TotalTime'].apply(lambda x: get_minutes(str(x)))
rec_df['TotalTime'].head(5)

rec_df['IngredientsList'] = rec_df['RecipeIngredientParts'].apply(lambda x: x.replace('"', '').replace('c(', '').replace(')', '').split(', '))

rec_df['IngredientsCount'] = rec_df['IngredientsList'].apply(lambda x: len(x))

rec_df['NummberOfLikes'] = 0

rec_cleaned_df = rec_df.to_csv('rec_cleaned_df.csv')

rev_df

rev_df = rev_df.dropna()
rev_df

datetime = pd.to_datetime(rev_df['DateSubmitted'])
rev_df['DateSubmitted'] = datetime.dt.date

datetime = pd.to_datetime(rev_df['DateModified'])
rev_df['DateModified'] = datetime.dt.date

rev_df.head(5)

rev_cleaned_df = rev_df.to_csv('rev_cleaned_df.csv')

rev_cleaned_df = pd.read_csv('rev_cleaned_df.csv')
rev_cleaned_df

rev_cleaned_df.head(5)

"""Used below for Milestone 1"""

cal_avg = rec_df['Calories'].mean()
cal_avg

fat_avg = rec_df['FatContent'].mean()
fat_avg

fat_sd = rec_df['FatContent'].std()
fat_sd

revc_avg = rec_df['ReviewCount'].mean()
revc_avg

revc_sd = rec_df['ReviewCount'].std()
revc_sd

rev_df = pd.read_csv("reviews.csv")

rev_df['Rating'].dtypes

rating_sd = rev_df['Rating'].std()
rating_sd

rating_avg = rev_df['Rating'].mean()
rating_avg

revcount_sd = rev_df[['AuthorName']].groupby(['AuthorName']).count()
revcount_sd

"""Found upper bounds for sliders"""

rec_cleaned_df = pd.read_csv("rec_cleaned_df.csv")

rec_cleaned_df.head(5)

"""Used below for maximum numbers on search page"""

rec_cleaned_df['CookTime'].max()

rec_cleaned_df['PrepTime'].max()

rec_cleaned_df['TotalTime'].max()

rec_cleaned_df['SaturatedFatContent'].max()

rec_cleaned_df['CholesterolContent'].max()

rec_cleaned_df['SodiumContent'].max()

rec_cleaned_df['CarbohydrateContent'].max()

rec_cleaned_df['ProteinContent'].max()

rec_cleaned_df['FiberContent'].max()

rec_cleaned_df['SugarContent'].max()

rec_cleaned_df['RecipeYield'].max()

rec_cleaned_df['RecipeServings'].max()

rec_cleaned_df['IngredientsCount'].max()

"""Used below for summary statistics in final report."""

rec_cleaned_df['IngredientsCount'].mean()

rec_cleaned_df['PrepTime'].mean()

rec_cleaned_df['RecipeServings'].mean()